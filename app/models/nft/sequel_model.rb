# frozen_string_literal: true

class Nft::SequelModel < Sequel::Model(:nfts)
  # region associations

  many_to_one(
    :nft_class,
    class: NftClass::SequelModel,
    # FK column in this table
    key: :class_id,
    # FK column in associated table
    primary_key: :class_id,
  )

  # endregion associations

  dataset_module do
    def with_owner_only(owner)
      # Just convert to array first, single or multiple
      all_owner_values = Array(owner).flat_map do |maybe_addr|
        Cosmos::Account::Addresses::ConvertOneAddressToManyVariants::Operation.call(address: maybe_addr).addresses
      end

      where(owner: all_owner_values)
    end

    def only_created_after(timestamp)
      where{created_at > timestamp}
    end

    def only_created_before(timestamp)
      where{created_at < timestamp}
    end

    def only_updated_after(timestamp)
      where{updated_at > timestamp}
    end

    def only_updated_before(timestamp)
      where{updated_at < timestamp}
    end

    def only_class_created_after(timestamp)
      where{class_created_at > timestamp}
    end

    def only_class_created_before(timestamp)
      where{class_created_at < timestamp}
    end

    def without_owner_only
      where(owner: nil)
    end
  end

  # region hooks

  def before_validation
    self.class_created_at = nft_class&.class_created_at
    super
  end

  # endregion hooks
end

# Table: nfts
# Columns:
#  id         | bigint                      | PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
#  class_id   | text                        |
#  nft_id     | text                        |
#  uri        | text                        |
#  uri_hash   | text                        |
#  owner      | text                        |
#  created_at | timestamp without time zone |
#  updated_at | timestamp without time zone |
# Indexes:
#  nfts_pkey                | PRIMARY KEY btree (id)
#  nfts_class_id_nft_id_key | UNIQUE btree (class_id, nft_id)
#  nfts_class_id_index      | btree (class_id)
#  nfts_created_at_index    | btree (created_at)
#  nfts_owner_index         | btree (owner)
#  nfts_updated_at_index    | btree (updated_at)
