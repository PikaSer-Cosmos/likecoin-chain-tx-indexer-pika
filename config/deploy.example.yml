# Name of your application. Used to uniquely configure containers.
service: <%= ENV["KAMAL_SERVICE"] %>

# Name of the container image.
image: <%= ENV["KAMAL_IMAGE"] %>

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV["KAMAL_SERVER_HOST"] %>
    env:
      clear:
        # Update to true to enable YJIT stats (e.g. `ratio_in_yjit`)
        RUBY_YJIT_STATS_ENABLED: false
        # `--yjit-disable` disable YJIT (even with YJIT flags passed)
        # https://github.com/ruby/ruby/blob/ruby_3_3/doc/yjit/yjit.md#command-line-options
        #
        # `--yjit-exec-mem-size` = size of the executable memory block to allocate, in MiB
        # Ideally, `ratio_in_yjit` should be as large as 99% (if available memory allows)
        # Default value is small so for some apps setting it to a larger value
        # might be needed to have high enough `ratio_in_yjit`
        # RUBYOPT: "--yjit-disable --yjit-exec-mem-size=48"
  cron:
    hosts:
      - <%= ENV["KAMAL_SERVER_HOST"] %>
    cmd: bundle exec clockwork clock.rb
  worker:
    hosts:
      - <%= ENV["KAMAL_SERVER_HOST"] %>
    cmd: bundle exec good_job
    env:
      clear:
        GOOD_JOB_MAX_THREADS: 10

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username:
    - KAMAL_REGISTRY_USERNAME

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    # Assuming rails & pg container in the same host
    DB_HOST: <%= ENV["KAMAL_SERVER_HOST"] %>
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD
    - LIKECOIN_NODE_REST_API_BASE_URL
    - PGHERO_DASHBOARD_ENABLED
    - PGHERO_USERNAME
    - PGHERO_PASSWORD
    - GOOD_JOB_DASHBOARD_ENABLED

# Use a different ssh user than root
ssh:
  user: <%= ENV["KAMAL_SSH_USER"] %>

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Only build locally for amd64
# Not working, see https://github.com/basecamp/kamal/discussions/549
#builder:
#  local:
#    arch: amd64

# Using Registry cache
#builder:
#  cache:
#    type: registry
#    # while in max cache mode, all layers are cached, even those of intermediate steps.
#    # https://docs.docker.com/build/cache/backends/#cache-mode
#    options: mode=max,compression=zstd

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# See example at https://nts.strzibny.name/deploying-rails-single-server-kamal/
accessories:
  db:
    image: postgres:16.2
    # If Docker registry is down you can use different container registry
    # image: public.ecr.aws/docker/library/postgres:16.2
    host: <%= ENV["KAMAL_SERVER_HOST"] %>
    port: 5432
    cmd: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    env:
      clear:
        POSTGRES_USER: "likecoin_chain_tx_indexer_pika"
        POSTGRES_DB: 'likecoin_chain_tx_indexer_pika_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - kamal/db/postgres.conf:/etc/postgresql/postgresql.conf
      - kamal/db/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data

# Configure custom arguments for Traefik
# traefik:
#   args:
#     accesslog: true
#     accesslog.format: json

traefik:
  # If Docker registry is down you can use different container registry
  # image: public.ecr.aws/docker/library/traefik:v2.9
  args:
    entrypoints.web.address: ':80'
    entryPoints.web.forwardedHeaders.insecure: true

# Configure a custom healthcheck (default is /up on port 3000)
# healthcheck:
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2
